// See LICENSE.txt for license details.

#ifndef FLOW_METER_H
#define FLOW_METER_H

#include <Arduino.h>
#include <SPI.h>

#include "config.h"

/*! \brief Manages a flow meter who pulses on a digital input pin during flow.
 *
 *  In order to determine the flow rate, the pulses generated by the flow meter
 *  are captured over a known interval.  From the number of pulses counted over
 *  the interval we can obtain both the average flow rate over the interval and
 *  the volume flowed during the interval given a conversion factor.
 *
 *  Calibrating your flow meter is recommended. Do this by opening the valve
 *  for a fixed interval, measuring the volume, and counting the total number
 *  of pulses. Calculate the conversion factor from pulses to volume by dividing
 *  the volume by the number of pulses. Run this test a number of times to find
 *  the average volume per pulse.
 *  Divide your volume by the interval to ensure your flow rate is within the
 *  meter's range of operation.
 *
 *  \see http://www.seeedstudio.com/depot/g12-water-flow-sensor-p-635.html
 */
class FlowMeter
{
  private:
    uint16_t _pulseCount; //!< Accumulates when flow meter pulses on #_interruptPin when interrupts are attached and enabled
    unsigned long _delay_ms; //!< The duration used to sample pulses while reading the flow rate
    int _interruptPin; //!< The input pin attached to the flow meter's output
    int _interruptNumber; //!< The interrupt number used for the flow meter
    
    void _startReading(); //!< Attach #_interruptPin to #pulse() using #_interruptNumber and set current flow meter to this instance
    void _stopReading(); //!< Detach interrupts and clear the current flow meter reference
  public:
    FlowMeter(){}
    ~FlowMeter(){}
    
    //!< Sets up the flow meter pins, etc.
    void begin(int interruptPin, int interruptNumber);
    
    //!< Read flowed volume in mL until a maximum volume is reached, a given time since the meter read flow has passed, and/or a total time has passed
    float readVolume_mL(float maxVolume_mL, unsigned long lastPulseTimeout_ms = 1000, unsigned long totalTimeout_ms = 5000, unsigned long delay_ms = 250);

    void calibrate(unsigned long pourtime_ms = 1000, unsigned long timeout_ms = 5000); // Will return the pulse count from first pulse to last.
    
    //!< Interrupt handler for a flow meter pulse.
    static void pulse();
};

#endif
